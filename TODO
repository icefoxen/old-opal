Hokay.  Let's start writing a bytecode-compiler...
To do that, we need a few things.
0) Maybe fix namespaces
*1) Arrays
2) Chars/strings
3) Library
The library must include: Bit of OCaml FFI framework, file and string IO, list
handling, a set data structure, maybe refs using single-element arrays, list
and array iterators, file loading... that oughta do it.

Might also be nice:
Exceptions
Continuations?  Macros???

TODO:
-Make tables/namespaces work.  namespace, import, use, as.  Make-namespace?
-Docstrings?


-Chars, arrays, strings, floats
-Type declerations
-Files
-Library, FFI
-Make tail-call optimization work --um, maybe later.


-Inspect, dir, disassemble...

-Exceptions?  CSP threading?
-Objects?
-Ratios?  Complex numbers?
-Function calls with named values and defaults?  Or at least varargs?

-With macros and continuations, you could probably write objects, exceptions
and CSP...



Runtime (speculative)
Built-in database?
Or simply a set of packages/images that are serialized to disk...
Versioning, system-building...

Ideally, the language should be its own text editor, command line, scripting
language, and so on.


